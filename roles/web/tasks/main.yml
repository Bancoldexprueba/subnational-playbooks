---
- pause: prompt="Deploying backend ({{atlas_git_version}}) and frontend ({{atlas_frontend_git_version}}) to {{ansible_ssh_host}} with environment type {{atlas_environment}}. Ctrl+C to cancel!"

- name: install ppas and update cache
  apt_repository: repo={{item}}
  with_items: system_ppas

- name: install system packages
  apt: pkg={{item}} state=present
  with_items: system_packages

- name: add config for unattended upgrades
  copy: src=20auto-upgrades dest=/etc/apt/apt.conf.d/20auto-upgrades

- name: create srv dir
  file: dest={{atlas_path}} owner={{atlas_webuser}} group={{atlas_webuser}} state=directory recurse=yes

- name: create vis-toolkit dir
  file: dest={{atlas_vistk_path}} owner={{atlas_webuser}} group={{atlas_webuser}} state=directory recurse=yes

- name: create log dir
  file: dest=/var/log/colombia/ owner={{atlas_webuser}} group={{atlas_webuser}} state=directory recurse=yes

- name: get backend code
  git: repo={{atlas_git_repo}}
       dest={{atlas_path}}
       version={{atlas_git_version}}
       accept_hostkey=true
  sudo_user: "{{atlas_webuser}}"

- name: create a new venv
  shell: "pyvenv-3.4 --without-pip {{atlas_path}}/env/"
  sudo_user: "{{atlas_webuser}}"

- name: install pip from get-pip into existing pyvenv
  shell: ". {{atlas_path}}/env/bin/activate; curl https://bootstrap.pypa.io/get-pip.py | python3"
  sudo_user: "{{atlas_webuser}}"

- name: install atlas python requirements
  pip: requirements={{atlas_path}}/requirements.txt virtualenv={{atlas_path}}/env/ virtualenv_command=pyvenv-3.4
  sudo_user: "{{atlas_webuser}}"

- name: install atlas python dev requirements
  pip: requirements={{atlas_path}}/requirements-dev.txt virtualenv={{atlas_path}}/env/ virtualenv_command=pyvenv-3.4
  sudo_user: "{{atlas_webuser}}"
  when: atlas_environment == 'dev'

- include: frontend.yml

- name: Remove existing nginx config
  file: path=/etc/nginx/sites-enabled/default state=absent

- name: copy in nginx site config file
  template: src=nginx.{{atlas_environment}} dest=/etc/nginx/sites-enabled/{{atlas_environment}}

- name: copy in nginx main config files
  template: src=nginx.conf.{{atlas_environment}} dest=/etc/nginx/nginx.conf

- name: generate htpasswd file
  htpasswd: name=atlas password={{atlas_password}} path=/etc/nginx/htpasswd
  when: atlas_password_protected == True

- name: copy in flask config
  template: src=conf.py dest={{atlas_path}}/conf/prod.py
  when: atlas_environment == 'prod'

- name: copy in uwsgi config
  template: owner={{atlas_webuser}} src=atlas.uwsgi.ini dest=/etc/uwsgi/apps-enabled/atlas.ini

- name: copy in supervisor config
  template: owner={{atlas_webuser}} src=supervisor.atlas.conf dest=/etc/supervisor/conf.d/atlas.conf

- name: copy in database
  copy: owner={{atlas_webuser}} src=database.db dest={{atlas_path}}/colombia/

- name: clear nginx cache
  file: name=/tmp/nginx_cache/ state=absent

- name: reload nginx service
  service: name=nginx state=reloaded

- name: reload uwsgi
  supervisorctl: name=uwsgi state=restarted
  when: atlas_environment == 'prod'

- name: Send notification message via Slack
  local_action:
    module: slack
    domain: cid-harvard.slack.com
    token: "{{ atlas_slack_token }}"
    msg: "Deployed backend ({{ atlas_git_version }}) and frontend ({{atlas_frontend_git_version}}) to {{ ansible_ssh_host }} with environment type {{atlas_environment}}."
  sudo: no
  when: atlas_environment == 'prod'
