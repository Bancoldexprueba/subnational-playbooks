---
- name: install system packages
  apt: pkg={{item}} state=present
  with_items: system_packages

- name: create srv dir
  file: dest={{atlas_prefix}} owner={{atlas_webuser}} group={{atlas_webuser}} state=directory recurse=yes

- name: create frontend dir
  file: dest=/srv/colombia-frontend owner={{atlas_webuser}} group={{atlas_webuser}} state=directory recurse=yes

- name: create vis-toolkit dir
  file: dest=/srv/vis-toolkit owner={{atlas_webuser}} group={{atlas_webuser}} state=directory recurse=yes

- name: create log dir
  file: dest=/var/log/colombia/ owner={{atlas_webuser}} group={{atlas_webuser}} state=directory recurse=yes

- name: get backend code
  git: repo={{atlas_git_repo}}
       dest={{atlas_prefix}}
       version={{atlas_git_version}}
       accept_hostkey=true
  sudo_user: "{{atlas_webuser}}"

- name: create a new venv
  shell: "pyvenv-3.4 --without-pip {{atlas_prefix}}/env/"
  sudo_user: "{{atlas_webuser}}"

- name: install pip from get-pip into existing pyvenv
  shell: ". {{atlas_prefix}}/env/bin/activate; curl https://bootstrap.pypa.io/get-pip.py | python3"
  sudo_user: "{{atlas_webuser}}"

- name: install atlas python requirements
  pip: requirements={{atlas_prefix}}/requirements.txt virtualenv={{atlas_prefix}}/env/ virtualenv_command=pyvenv-3.4
  sudo_user: "{{atlas_webuser}}"

- name: install atlas python dev requirements
  pip: requirements={{atlas_prefix}}/requirements-dev.txt virtualenv={{atlas_prefix}}/env/ virtualenv_command=pyvenv-3.4
  sudo_user: "{{atlas_webuser}}"
  when: atlas_environment == 'dev'

- name: get frontend code
  git: repo=git@github.com:cid-harvard/atlas-colombia.git
       dest=/srv/colombia-frontend
       version=master
       accept_hostkey=true
  sudo_user: "{{atlas_webuser}}"
  tags: frontend

#- name: copy in frontend dist
#  unarchive: owner={{atlas_webuser}} src=dist.tar.gz dest=/srv/colombia-frontend/

#- name: Correct API URL in frontend code
#  lineinfile:   dest=/srv/colombia-prototype/app/scripts/main.js
#                regexp="^\s*apiURL\s*=.*,$"
#                line="apiURL = \"{{atlas_api_url}}\","
#  sudo_user: "{{atlas_webuser}}"

- name: install sass
  gem: name=sass state=latest
  tags: frontend

- name: install ember
  npm: name=ember-cli state=latest global=yes
  tags: frontend

- name: install grunt-cli
  npm: name=grunt-cli state=latest global=yes
  tags: frontend

- name: Install frontend packages based on package.json.
  npm: path=/srv/colombia-frontend/ state=latest
  sudo_user: "{{atlas_webuser}}"
  tags: frontend

- name: Install packages based on bower.json.
  bower: path=/srv/colombia-frontend/
  sudo_user: "{{atlas_webuser}}"
  tags: frontend

- name: get vis-toolkit code
  git: repo=git@github.com:cid-harvard/vis-toolkit.git
      dest=/srv/vis-toolkit
       version=master
       accept_hostkey=true
  sudo_user: "{{atlas_webuser}}"
  tags: frontend

- name: Install vis-toolkit packages based on package.json.
  npm: path=/srv/vis-toolkit/
  sudo_user: "{{atlas_webuser}}"
  tags: frontend

- name: run grunt
  shell: "cd /srv/vis-toolkit/; grunt concat"
  sudo_user: "{{atlas_webuser}}"
  tags: frontend

- name: bower link
  shell: "cd /srv/vis-toolkit/; bower link"
  sudo_user: "{{atlas_webuser}}"
  tags: frontend

- name: bower link vis-toolkit
  shell: "cd /srv/colombia-frontend/; bower link vis-toolkit"
  sudo_user: "{{atlas_webuser}}"
  tags: frontend

- name: ember build
  shell: "cd /srv/colombia-frontend/; ember build --environment=production"
  sudo_user: "{{atlas_webuser}}"
  environment: "{{atlas_ember_environment}}"
  tags: ember

- name: Remove existing nginx config
  file: path=/etc/nginx/sites-enabled/default state=absent

- name: copy in nginx site config file
  template: src=nginx.{{atlas_environment}} dest=/etc/nginx/sites-enabled/{{atlas_environment}}
  tags: debug

- name: copy in nginx main config files
  template: src=nginx.conf.{{atlas_environment}} dest=/etc/nginx/nginx.conf

- name: generate htpasswd file
  htpasswd: name=atlas password={{atlas_password}} path=/etc/nginx/htpasswd
  when: atlas_password_protected == True

- name: copy in flask config
  template: src=conf.py dest={{atlas_prefix}}/conf/prod.py
  when: atlas_environment == 'prod'

- name: copy in uwsgi config
  template: owner={{atlas_webuser}} src=atlas.uwsgi.ini dest=/etc/uwsgi/apps-enabled/atlas.ini

- name: copy in supervisor config
  template: owner={{atlas_webuser}} src=supervisor.atlas.conf dest=/etc/supervisor/conf.d/atlas.conf

- name: copy in database
  copy: owner={{atlas_webuser}} src=database.db dest={{atlas_prefix}}/colombia/

- name: reload nginx service
  service: name=nginx state=reloaded
  tags: debug

- name: reload uwsgi
  supervisorctl: name=uwsgi state=restarted
  when: atlas_environment == 'prod'

- name: Send notification message via Slack
  local_action:
    module: slack
    domain: cid-harvard.slack.com
    token: "{{ atlas_slack_token }}"
    msg: "Deployed {{ atlas_git_repo }}/{{ atlas_git_version }} to {{ ansible_ssh_host }} with environment type {{atlas_environment}}."
  sudo: no
  when: atlas_environment == 'prod'
